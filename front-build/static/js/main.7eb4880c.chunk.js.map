{"version":3,"sources":["images/Preloader.svg","components/ad_page/add_ad_button/add_button.module.css","components/ad_page/ad_item/ad_item.module.css","components/add_ad_page/add_ad_page.module.css","api_express/api.ts","services/cookies_functions.ts","services/generator_id.ts","redux/login_reduser.ts","components/preloader/preloader.tsx","components/login_page/input_login_field.tsx","components/login_page/login_page_form.tsx","components/login_page/login_page.tsx","components/login_page/login_page_container.tsx","components/header/nav_button_m_ui.tsx","components/header/header.tsx","components/ad_page/ad_item/ad_item.tsx","components/ad_page/ad_item/ad_item_container.tsx","components/my_ad_page/no_ads.tsx","components/ad_page/add_ad_button/add_ad_button.tsx","services/data_picker.ts","redux/ad_reduser.ts","components/ad_page/ad_page.tsx","components/add_ad_page/add_ad_form.tsx","components/add_ad_page/add_ad_page.tsx","components/add_ad_page/add_ad_page_container.tsx","components/my_ad_page/my_ad_page.tsx","components/my_ad_page/my_ad_page_container.tsx","components/edit_my_ad_page/edit_form_redux.tsx","components/edit_my_ad_page/edit_my_ad.tsx","components/edit_my_ad_page/edit_my_ad_container.tsx","App.tsx","services/developer_functions.ts","serviceWorker.ts","redux/redux_store.ts","index.tsx","components/login_page/login_page.module.css","components/header/header.module.css","images/gebo_logo.jpg","images/peace.jpg","components/my_ad_page/my_ad_page.module.css"],"names":["module","exports","instance","axios","create","baseURL","apiExpress","getAds","userId","get","getMyAds","deleteAd","adId","addNewUser","userData","put","addNewAd","adData","editAd","getCookie","name","matches","document","cookie","match","RegExp","replace","decodeURIComponent","setCookie","value","options","path","samesite","updatedCookie","encodeURIComponent","optionKey","optionValue","deleteCookie","addCookies","idUser","console","log","registered","generatorId","c","crypto","getRandomValues","Uint8Array","toString","initialState","setUser","type","loginReduser","state","action","Preloader","src","preloader","InputLogin","input","props","meta","placeholder","className","s","inputForm","reduxForm","form","onSubmit","handleSubmit","Field","component","LoginPage","loginContainer","logoContainer","logo","loginForm","connector","connect","addNewUserThunk","formData","dispatch","a","async","login","data","useState","buttonLogin","setButton","MenuButton","React","anchorEl","setAnchorEl","handleClose","exact","render","Button","color","style","fontSize","onClick","event","currentTarget","Menu","id","keepMounted","open","Boolean","onClose","MenuItem","to","Header","headerContainer","buttonsBar","headerFixedBlock","AdItem","item","img","idAd","description","autor","autorId","typeClass","typeText","typeClassName","typeAd1","typeAd2","typeAd3","typeAd4","adItem","plugPicture","adDescript","adInfo","adAutor","typeAd","dataAd","userButtonBlock","editButton","deleteButton","ButtonGroup","orientation","aria-label","AdItemCon","ads","adItems","map","NoAds","noAdsMessage","AddAdButton","addButton","dataPicker","time","Date","month","getMonth","day","getUTCDate","hours","getHours","minutes","getMinutes","isEditAdLoad","isEditAdLoadFinish","myAdsInfo","haveAds","adsData","adsInfo","adAddLoad","changeLoadEditAdFinish","toggle","adReducer","newItem","filter","length","adPage","loginPage","getAdsThunk","response","deleteAllAd","useEffect","submit","setSubmit","adForm","radioBlock","htmlFor","inputFile","AddAdPage","addAdPage","loaded","AddAdThunk","category","categoryText","addData","adFoto","discription","stopToLoad","MyAdPage","pageContainer","deleteMyAdThunk","getMyAdsThunk","deleteMyAd","EditAdFormRedux","peacePicture","EditMyAd","initialValues","AddEditAdThunk","statusText","addEventListener","ctrlKey","altKey","window","store","getState","location","hostname","redusers","combineReducers","adReduser","formReducer","createStore","applyMiddleware","thunkMiddleware","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7eb4880c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Preloader.7b8771e8.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addButton\":\"add_button_addButton__3jdAh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"adItem\":\"ad_item_adItem__FwXex\",\"adDescript\":\"ad_item_adDescript__2TvZC\",\"adInfo\":\"ad_item_adInfo__1VcBa\",\"typeAd\":\"ad_item_typeAd__2KppD\",\"typeAd1\":\"ad_item_typeAd1__34GyY\",\"typeAd2\":\"ad_item_typeAd2__2OhH3\",\"typeAd3\":\"ad_item_typeAd3__2nqge\",\"typeAd4\":\"ad_item_typeAd4__3_8et\",\"dataAd\":\"ad_item_dataAd__1Phv-\",\"adAutor\":\"ad_item_adAutor__aUuRE\",\"userButtonBlock\":\"ad_item_userButtonBlock__1spZz\",\"editButton\":\"ad_item_editButton__37KAG\",\"deleteButton\":\"ad_item_deleteButton__8xIwy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addAdPage\":\"add_ad_page_addAdPage__QbpWe\",\"adForm\":\"add_ad_page_adForm__2RqF_\",\"radioBlock\":\"add_ad_page_radioBlock__3VLgN\",\"inputFile\":\"add_ad_page_inputFile__2Z3AT\",\"adFoto\":\"add_ad_page_adFoto__2EweN\",\"pageContainer\":\"add_ad_page_pageContainer__9tyfQ\"};","import axios from 'axios'\r\nimport {AdDataType, InitialStateAndUserDataType} from '../types/types'\r\n\r\nconst instance = axios.create({ baseURL: 'https://gebo-app.herokuapp.com/' })\r\n// http://localhost:2000/\r\n// https://gebo-app.herokuapp.com/\r\n\r\nconst apiExpress = {\r\n  getAds(userId: string) {\r\n    return instance.get(`get-ads/${userId}`)\r\n  },\r\n  getMyAds(userId: string) {\r\n    return instance.get(`get-my-ads/${userId}`)\r\n  },\r\n  deleteAd(adId: string) {\r\n    return instance.get(`delete-ad/${adId}`)\r\n  },\r\n  addNewUser(userData: InitialStateAndUserDataType) {\r\n    return instance.put(`add-new-user`, { userData: userData })\r\n  },\r\n  addNewAd(adData: AdDataType) {\r\n    return instance.put(`add-new-ad`, { adData: adData })\r\n  },\r\n  editAd(adData: AdDataType) {\r\n    return instance.put(`edit-ad`, { adData: adData })\r\n  }\r\n}\r\n\r\nexport default apiExpress","// :todo need update to localstorage functions\r\n\r\nimport {InitialStateAndUserDataType} from \"../types/types\";\r\n\r\nexport let getCookie = (name: string): string | null => {\r\n    let matches: any = document.cookie.match(new RegExp(\r\n        \"(?:^|; )\" + name.replace(/([\\.$?*|{}\\(\\)\\[\\]\\\\\\/\\+^])/g, '\\\\$1') + \"=([^;]*)\"\r\n    ))\r\n    return matches ? decodeURIComponent(matches[1]) : null\r\n}\r\n\r\nexport let setCookie = (name: string, value: string | boolean, options: any = {}): void => {\r\n\r\n    options = {\r\n        path: '/',\r\n        'max-age': 360*365,\r\n        samesite: 'lax',\r\n        ...options\r\n    }\r\n\r\n    let updatedCookie: string = encodeURIComponent(name) + \"=\" + value\r\n\r\n    for (let optionKey in options) {\r\n        updatedCookie += \"; \" + optionKey\r\n        let optionValue: boolean = options[optionKey]\r\n        if (!optionValue) {\r\n            updatedCookie += \"=\" + optionValue\r\n        }\r\n    }\r\n    document.cookie = updatedCookie\r\n}\r\n\r\nexport let deleteCookie = (name: string): void => {\r\n    setCookie(name, \"\", {\r\n      'max-age': -1\r\n    })\r\n  }\r\n\r\nexport let addCookies = (userData: InitialStateAndUserDataType) => {\r\n    if (userData.name != null && userData.idUser != null) {\r\n        setCookie('user', userData.name)\r\n        setCookie('idUser', userData.idUser)\r\n    }\r\n    else {\r\n        console.log('Error: Cookies not added.')\r\n    }\r\n\r\n    if (userData.registered) {\r\n        setCookie('registered', 'true')\r\n    }\r\n    else {\r\n        setCookie('registered', 'false')\r\n    }\r\n  }","// @ts-ignore\r\nexport let generatorId = (): string => ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,c=>(c^crypto.getRandomValues(new Uint8Array(1))[0]&15 >> c/4).toString(16))","import apiExpress from '../api_express/api'\r\nimport { addCookies } from '../services/cookies_functions'\r\nimport {AdDataType, InitialStateAndUserDataType, LoginFormDataType} from '../types/types'\r\nimport {generatorId} from '../services/generator_id'\r\nimport {ThunkAction} from 'redux-thunk'\r\nimport {AppStateType} from './redux_store'\r\nimport {AxiosResponse} from \"axios\";\r\n\r\n///////////// Const for actioncreators\r\nconst SET_AUTH_USER_DATA = 'SET_AUTH_USER_DATA'\r\n\r\n///////////// Initial state\r\nlet initialState: InitialStateAndUserDataType = {\r\n    registered: false,\r\n    name: null,\r\n    idUser: null\r\n}\r\n\r\n///////////// Reduser\r\nconst loginReduser = (state = initialState, action: ActionsTypes): InitialStateAndUserDataType => {\r\n    switch (action.type) {\r\n        case SET_AUTH_USER_DATA: {\r\n            return {\r\n                ...action.userData\r\n            }\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n\r\n}\r\n\r\n///////////// Actioncreators\r\n// actions types\r\ntype ActionsTypes = SetUser_ActionType\r\n//\r\ntype SetUser_ActionType = {\r\n    type: typeof SET_AUTH_USER_DATA\r\n    userData: InitialStateAndUserDataType\r\n}\r\nexport let setUser = (userData: InitialStateAndUserDataType): SetUser_ActionType => ({\r\n    type: SET_AUTH_USER_DATA,\r\n    userData: userData\r\n})\r\n\r\n///////////// Thanks\r\n// types for thunks\r\ntype ThunkActions = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>\r\n//\r\nexport let addNewUserThunk = (formData: LoginFormDataType): ThunkActions => async (dispatch) => {\r\n\r\n    let userData = { registered: true, name: formData.login, idUser: generatorId() }\r\n\r\n    let response: AxiosResponse<string> = await apiExpress.addNewUser(userData)\r\n\r\n    if (response.data == 'OK') {\r\n        addCookies(userData)\r\n        dispatch(setUser(userData))\r\n        console.log('New user is added.')\r\n    }\r\n    else {\r\n        console.log('addNewUserThunk error.')\r\n    }\r\n}\r\n/////////////\r\n\r\nexport default loginReduser","import React from 'react'\r\nimport preloader from '../../images/Preloader.svg'\r\n\r\n///////////// component shows when data loading\r\nlet Preloader = () => {\r\n    return (<img src={preloader} />)\r\n}\r\n\r\nexport default Preloader","import React, {FC} from 'react'\r\nimport s from './login_page.module.css'\r\n\r\n///////////// types for props\r\n// :todo need fix any type\r\ntype PropsType = any\r\n\r\n///////////// input component for Field\r\nlet InputLogin: FC<PropsType> = ({ input, meta, ...props }) => {\r\n    return (\r\n        <input {...input} {...props} placeholder={\"Ім'я\"} className={s.inputForm} />\r\n    )\r\n}\r\n\r\n\r\nexport default InputLogin","import React, {FC} from 'react'\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form'\r\nimport InputLogin from './input_login_field'\r\nimport {LoginFormDataType} from '../../types/types'\r\n\r\n///////////// login form component\r\n//InjectedFormProps injected type for redux-form, LoginFormDataType type for submit function arguments\r\nlet LoginForm: FC<InjectedFormProps<LoginFormDataType>> = ({...props}) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit} >\r\n            <Field name={'login'} component={InputLogin} />\r\n            <button type='submit'>ПОГНАЛИ</button>\r\n        </form>\r\n    )\r\n}\r\n\r\n// LoginFormDataType for arguments in submit function\r\nexport default reduxForm<LoginFormDataType>({ form: 'login' })(LoginForm)\r\n","import React, {FC} from 'react'\r\nimport s from './login_page.module.css'\r\nimport logo from '../../images/gebo_logo.jpg'\r\nimport {LoginFormDataType} from '../../types/types'\r\nimport LoginForm from './login_page_form'\r\n\r\n///////////// types for props\r\ntype PropsType = {\r\n    onSubmit: (formData: LoginFormDataType)=> void\r\n}\r\n\r\n///////////// login page component\r\nlet LoginPage: FC<PropsType> = ({onSubmit}) => {\r\n  return (\r\n    <div className={s.loginContainer}>\r\n      <div className={s.logoContainer}>\r\n        <img src={logo}/>\r\n        <h1>Gebo</h1>\r\n      </div>\r\n      <div className={s.loginForm}>\r\n        <h2>ВХІД</h2>\r\n        <LoginForm onSubmit={onSubmit} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LoginPage","import React, {FC, useState} from 'react'\r\nimport { addNewUserThunk } from '../../redux/login_reduser'\r\nimport {connect, ConnectedProps} from 'react-redux'\r\nimport Preloader from '../preloader/preloader'\r\nimport LoginPage from './login_page'\r\nimport {LoginFormDataType} from '../../types/types'\r\n\r\n///////////// types for props\r\ntype PropsType = PropsFromRedux\r\n// types takes from connect() where added mapStateToProps and mapDispatchToProps\r\ntype PropsFromRedux = ConnectedProps<typeof connector>\r\n\r\n///////////// login page container component\r\nlet LoginPageCon: FC<PropsType> = ({addNewUserThunk}) => {\r\n\r\n  const [buttonLogin, setButton] = useState(0)\r\n\r\n  let onSubmit = (formData: LoginFormDataType) => {\r\n\r\n    addNewUserThunk(formData)\r\n    setButton(1)\r\n  }\r\n\r\n  return (\r\n    <>\r\n    {buttonLogin === 0\r\n    ? <LoginPage onSubmit={onSubmit} />\r\n    : <Preloader/>}\r\n    </>\r\n  )\r\n}\r\n\r\nconst connector = connect(null, { addNewUserThunk })\r\nexport default connector(LoginPageCon)","import React, {FC} from 'react'\r\nimport { Route } from 'react-router-dom'\r\nimport { NavLink } from 'react-router-dom'\r\n// material ui-----------------\r\nimport Menu from '@material-ui/core/Menu'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport MenuIcon from '@material-ui/icons/Menu'\r\nimport Button from '@material-ui/core/Button'\r\nimport FilterListIcon from '@material-ui/icons/FilterList'\r\nimport SettingsIcon from '@material-ui/icons/Settings'\r\n\r\n// :todo file have any types TS\r\n\r\nlet MenuButton: FC = () => {\r\n    const [anchorEl, setAnchorEl] = React.useState(null)\r\n\r\n    const handleClick = (event: any) => {\r\n        setAnchorEl(event.currentTarget)\r\n    }\r\n\r\n    const handleClose = () => {\r\n        setAnchorEl(null)\r\n    }\r\n    return <>\r\n            <Route path=\"/\" exact render={() => <Button color=\"inherit\"><FilterListIcon style={{ fontSize: 30 }} /></Button>} />\r\n            <Button color=\"inherit\"><SettingsIcon style={{ fontSize: 30 }} /></Button>\r\n            <Button color=\"inherit\" onClick={handleClick}><MenuIcon style={{ fontSize: 30 }} /></Button>\r\n            <Menu\r\n                id=\"simple-menu\"\r\n                anchorEl={anchorEl}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={handleClose}\r\n            >\r\n                <MenuItem onClick={handleClose}><NavLink to='/my-ad'>Мої оголошення</NavLink></MenuItem>\r\n                <MenuItem onClick={handleClose}>Діалоги</MenuItem>\r\n                <MenuItem onClick={handleClose}>FaQ</MenuItem>\r\n            </Menu>\r\n        </>\r\n}\r\n\r\nexport default MenuButton\r\n\r\n// ---------------------------------","import React, {FC} from 'react'\r\nimport s from './header.module.css'\r\nimport logo from '../../images/gebo_logo.jpg'\r\nimport MenuButton from './nav_button_m_ui'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\n///////////// Header app component\r\nlet Header: FC = () => {\r\n    return <>\r\n        <div className={s.headerContainer}>\r\n                <div className={s.logoContainer}>\r\n                <NavLink to='/'>\r\n                    <img src={logo} />\r\n                    </NavLink>\r\n                    <h1>Gebo</h1>\r\n                </div> \r\n            <div className={s.buttonsBar}>\r\n                <MenuButton />\r\n            </div>\r\n        </div>\r\n        <div className={s.headerFixedBlock}/>\r\n    </>\r\n}\r\n\r\nexport default Header","import React, {FC} from 'react'\r\nimport s from './ad_item.module.css'\r\nimport { NavLink } from 'react-router-dom'\r\nimport plugPicture from '../../../images/peace.jpg'\r\nimport Button from '@material-ui/core/Button'\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup'\r\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz'\r\nimport EditIcon from '@material-ui/icons/Edit'\r\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever'\r\nimport {AdDataType} from '../../../types/types'\r\n\r\n///////////// types for props\r\ntype PropsType = {\r\n    item: AdDataType\r\n    userId: string | null\r\n\r\n    // :todo not sure maybe need added types for functions\r\n    editAd?: (item: AdDataType) => void\r\n    deleteAd?: (idItem: string) => void\r\n}\r\n\r\n///////////// ad item component\r\nlet AdItem: FC<PropsType> = ({ item, userId, editAd, deleteAd}) => {\r\n\r\n    // data destructuring\r\n    let { idAd, img, description, autor, autorId, typeClass, typeText, adData }: AdDataType = item;\r\n    let typeClassName: Array<string> = [s.typeAd1, s.typeAd2, s.typeAd3, s.typeAd4]\r\n\r\n    //create number type for index array\r\n    typeClass = +typeClass\r\n \r\n    return <div className={s.adItem}>\r\n            <div>\r\n                {/*if no image paste plugPicture*/}\r\n                <img src={img != null ? img : plugPicture} />\r\n            </div>\r\n            <div>\r\n                <div className={s.adDescript}><p>{description}</p></div>\r\n                <div className={s.adInfo}>\r\n                    <div className={s.adAutor}><p>{autor}</p><p className={s.typeAd + ' ' + typeClassName[typeClass]}>{typeText}</p><p className={s.dataAd}>{adData}</p></div>\r\n                    {/*if userId === autorId show buttongroup for manage ad*/}\r\n                    {userId === autorId\r\n                        ? <div id={s.userButtonBlock}>\r\n                            <NavLink  onClick={()=>{\r\n                                if (editAd) {\r\n                                    editAd(item)\r\n                                }}} to='/edit_my_ad'>\r\n                                <button className={s.editButton}><EditIcon /></button>\r\n                            </NavLink>\r\n                            <button onClick={()=>{\r\n                                if (deleteAd) {\r\n                                    deleteAd(item.idAd)\r\n                                }}}\r\n                                    className={s.deleteButton}><DeleteForeverIcon /></button>\r\n                        </div>\r\n                        : <div>\r\n                            <ButtonGroup\r\n                                orientation=\"vertical\"\r\n                                color=\"inherit\"\r\n                                aria-label=\"vertical outlined primary button group\"\r\n                            >\r\n                                <Button>Написати</Button>\r\n                                <Button><MoreHorizIcon /></Button>\r\n                            </ButtonGroup>\r\n                        </div>}\r\n                </div>\r\n            </div>\r\n        </div>\r\n}\r\n\r\nexport default AdItem\r\n\r\n\r\n","import React, {FC} from 'react'\r\nimport AdItem from './ad_item'\r\nimport {AdDataType} from '../../../types/types'\r\n\r\n///////////// types for props\r\ntype PropsType = {\r\n    ads: Array<AdDataType>\r\n    userId: string | null\r\n\r\n    // :todo not sure maybe need added types for functions\r\n    editAd?: (item: AdDataType) => void\r\n    deleteAd?: (idItem: string) => void\r\n}\r\n\r\n///////////// ads array container component\r\nlet AdItemCon: FC<PropsType> = ({ads, userId, editAd, deleteAd}) => {\r\n\r\n    // using maping method for create array with ads\r\n    let adItems = ads.map(item => <AdItem deleteAd={deleteAd} item={item} userId={userId} editAd={editAd} />)\r\n\r\n    return <>\r\n        {adItems}\r\n           </>\r\n\r\n}\r\n\r\nexport default AdItemCon\r\n","import React from 'react'\r\nimport s from './my_ad_page.module.css'\r\n\r\n///////////// component shows when no ads\r\nlet NoAds = () => {\r\n    return (\r\n        <div className={s.noAdsMessage}>\r\n           <p>Немає оголошень.</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NoAds","import React, {FC} from 'react'\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport s from './add_button.module.css'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\n///////////// add ad button component\r\nlet AddAdButton :FC = () => {\r\n    return <div className={s.addButton}>\r\n            <NavLink to='/add-ad'>\r\n                <button>\r\n                    <AddIcon style={{ fontSize: 30 }} />\r\n                </button>\r\n            </NavLink>\r\n        </div>\r\n}\r\n\r\nexport default AddAdButton","let dataPicker = (): string => {\r\n    let time: any = new Date()\r\n    let month: number | string = time.getMonth() + 1\r\n    if (month < 10) {\r\n        month = '0'+ month\r\n    }\r\n    let day: string = time.getUTCDate()\r\n    let hours: string = time.getHours()\r\n    let minutes: string = time.getMinutes()\r\n    let nowTime: string = `${month}.${day} ${hours}:${minutes}`\r\n    return nowTime\r\n}\r\n\r\nexport default dataPicker","import apiExpress from '../api_express/api'\r\nimport {AddAdFormDataType, AdDataType, AdsInfo, EditAdFormDataType, InitialStateAndUserDataType} from '../types/types'\r\nimport dataPicker from '../services/data_picker'\r\nimport {generatorId} from '../services/generator_id'\r\nimport {ThunkAction} from 'redux-thunk'\r\nimport {AppStateType} from './redux_store'\r\nimport {AxiosResponse} from 'axios'\r\n\r\n///////////// Const for actioncreators\r\nconst ADD_AD = 'ADD_AD'\r\nconst ADD_EDIT_AD = 'ADD_EDIT_AD'\r\nconst ADD_POST_EDIT_AD = 'ADD_POST_EDIT_AD'\r\nconst DELETE_AD = 'DELETE_AD'\r\nconst DELETE_ALL_AD = 'DELETE_ALL_AD'\r\nconst DELETE_MY_AD = 'DELETE_MY_AD'\r\nconst STOP_TO_LOAD = 'STOP_TO_LOAD'\r\nconst GET_ADS = 'GET_ADS'\r\nconst GET_MY_ADS = 'GET_MY_ADS'\r\nconst LOADING_EDIT_AD_FINISH = 'LOADING_EDIT_AD_FINISH'\r\n\r\n///////////// Initial state\r\ntype InitialStateType = {\r\n    editAd: AdDataType | {}\r\n    isEditAdLoad: boolean\r\n    isEditAdLoadFinish: boolean\r\n    myAdsInfo: AdsInfo\r\n    adsInfo: AdsInfo\r\n    adAddLoad: boolean\r\n}\r\nlet initialState: InitialStateType = {\r\n    editAd: {},\r\n    isEditAdLoad: false,\r\n    isEditAdLoadFinish: false,\r\n    myAdsInfo: {\r\n        haveAds: true,\r\n        adsData: []\r\n    },\r\n    adsInfo: {\r\n        haveAds: true,\r\n        adsData: []\r\n    },\r\n    adAddLoad: false\r\n}\r\n\r\n///////////// Reduser\r\nconst adReducer = (state: InitialStateType = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_AD: {\r\n            let myAdsInfo: AdsInfo = {\r\n                haveAds: true,\r\n                adsData: action.adData\r\n            }\r\n            return {\r\n                ...state,\r\n                myAdsInfo: myAdsInfo,\r\n                adAddLoad: true\r\n            }\r\n        }\r\n        case ADD_EDIT_AD: {\r\n            state.editAd = action.adData\r\n            return state\r\n        }\r\n        case ADD_POST_EDIT_AD: {\r\n            return {\r\n                ...state,\r\n                editAd: {}\r\n            }\r\n        }\r\n        case DELETE_AD: {\r\n            let newItem = state.myAdsInfo.adsData.filter((item: AdDataType) => item.idAd != action.adId)\r\n\r\n            let myAdsInfo: AdsInfo = {\r\n                haveAds: true,\r\n                adsData: newItem\r\n            }\r\n\r\n            if (newItem.length === 0) {\r\n                myAdsInfo.haveAds = false\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                myAdsInfo: myAdsInfo\r\n            }\r\n        }\r\n        case GET_ADS: {\r\n            let adsInfo: AdsInfo = {\r\n                ...state.adsInfo,\r\n                adsData: action.adsData\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                adsInfo: adsInfo\r\n            }\r\n        }\r\n        case GET_MY_ADS: {\r\n            let myAdsInfo: AdsInfo = {\r\n                adsData: action.myAdsInfo.adsData,\r\n                haveAds: action.myAdsInfo.haveAds\r\n            }\r\n            return {\r\n                ...state,\r\n                myAdsInfo: myAdsInfo\r\n            }\r\n        }\r\n        case DELETE_ALL_AD: {\r\n\r\n            let adsInfo: AdsInfo = {\r\n                ...state.adsInfo,\r\n                adsData: action.adsData\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                adsInfo: adsInfo\r\n            }\r\n        }\r\n        case DELETE_MY_AD: {\r\n            let myAdsInfo: AdsInfo = {\r\n                ...state.myAdsInfo,\r\n                adsData: action.adData\r\n            }\r\n            return {\r\n                ...state,\r\n                myAdsInfo: myAdsInfo\r\n            }\r\n        }\r\n        case STOP_TO_LOAD: {\r\n            return {\r\n                ...state,\r\n                adAddLoad: false\r\n            }\r\n        }\r\n        case LOADING_EDIT_AD_FINISH: {\r\n            return {...state, isEditAdLoadFinish: action.toggle}\r\n        }\r\n        default: {\r\n            return state\r\n        }\r\n    }\r\n\r\n}\r\n\r\n///////////// Actioncreators\r\n// actions types\r\ntype ActionsTypes =\r\n    AddAd_ActionType |\r\n    EditAd_ActionType |\r\n    AdData_ActionType |\r\n    DeleteAd_ActionType |\r\n    DeleteAllAd_ActionType |\r\n    DeleteMyAd_ActionType |\r\n    StopToLoad_ActionType |\r\n    GetAds_ActionType |\r\n    GetMyAds_ActionType |\r\n    LoadEditAdFinish_ActionType\r\n//\r\ntype AddAd_ActionType = {\r\n    type: typeof ADD_AD\r\n    adData: Array<AdDataType>\r\n}\r\nlet addAd = (): AddAd_ActionType => ({type: ADD_AD, adData: []})\r\n\r\nexport type EditAd_ActionType = {\r\n    type: typeof ADD_EDIT_AD\r\n    adData: AdDataType\r\n}\r\nexport let editAd = (adData: AdDataType): EditAd_ActionType => ({type: ADD_EDIT_AD, adData})\r\n\r\ntype AdData_ActionType = {\r\n    type: typeof ADD_POST_EDIT_AD\r\n}\r\n// :todo need added thunk for sync to backend\r\nlet addEditAd = (): AdData_ActionType => ({type: ADD_POST_EDIT_AD})\r\n\r\nexport type DeleteAd_ActionType = {\r\n    type: typeof DELETE_AD\r\n    adId: string\r\n}\r\nexport let deleteAd = (adId: string): DeleteAd_ActionType => ({type: DELETE_AD, adId})\r\n\r\ntype DeleteAllAd_ActionType = {\r\n    type: typeof DELETE_ALL_AD\r\n    adsData: Array<AdDataType>\r\n}\r\nexport let deleteAllAd = (): DeleteAllAd_ActionType => ({type: DELETE_ALL_AD, adsData: []})\r\n\r\ntype DeleteMyAd_ActionType = {\r\n    type: typeof DELETE_MY_AD\r\n    adData: Array<AdDataType>\r\n}\r\nexport let deleteMyAd = (): DeleteMyAd_ActionType => ({type: DELETE_MY_AD, adData: []})\r\n\r\ntype StopToLoad_ActionType = {\r\n    type: typeof STOP_TO_LOAD\r\n}\r\nexport let stopToLoad = (): StopToLoad_ActionType => ({type: STOP_TO_LOAD})\r\n\r\ntype GetAds_ActionType = {\r\n    type: typeof GET_ADS\r\n    adsData: Array<AdDataType>\r\n}\r\nlet getAds = (adsData: Array<AdDataType>): GetAds_ActionType => ({type: GET_ADS, adsData})\r\n\r\ntype GetMyAds_ActionType = {\r\n    type: typeof GET_MY_ADS\r\n    myAdsInfo: AdsInfo\r\n}\r\nlet getMyAds = (myAdsInfo: AdsInfo): GetMyAds_ActionType => ({type: GET_MY_ADS, myAdsInfo})\r\n\r\ntype LoadEditAdFinish_ActionType = {\r\n    type: typeof LOADING_EDIT_AD_FINISH\r\n    toggle: boolean\r\n}\r\n\r\nexport let changeLoadEditAdFinish = (toggle: boolean): LoadEditAdFinish_ActionType => ({type: LOADING_EDIT_AD_FINISH, toggle: toggle})\r\n\r\n///////////// Thunks\r\n// types for thunks\r\ntype ThunkActions = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>\r\n//\r\nexport let getAdsThunk = (userId: string | null): ThunkActions => async (dispatch) => {\r\n    if (userId === null) {\r\n        console.log('error in getAdsThunk: userId === null')\r\n    } else {\r\n        let response: AxiosResponse<Array<AdDataType>> = await apiExpress.getAds(userId)\r\n        dispatch(getAds(response.data))\r\n    }\r\n}\r\n\r\nexport let getMyAdsThunk = (userId: string): ThunkActions => async (dispatch) => {\r\n    let response: AxiosResponse<Array<AdDataType>> = await apiExpress.getMyAds(userId);\r\n\r\n    if (response.data.length === 0) {\r\n        dispatch(getMyAds({haveAds: false, adsData: []}))\r\n    } else {\r\n        dispatch(getMyAds({haveAds: true, adsData: response.data}))\r\n    }\r\n}\r\n\r\nexport let deleteMyAdThunk = (adId: string): ThunkActions => async (dispatch) => {\r\n\r\n    // response have many data, because here any type\r\n    let response: AxiosResponse<string> = await apiExpress.deleteAd(adId)\r\n    if (response.data == 'OK') {\r\n        dispatch(deleteAd(adId))\r\n        console.log('Ad to delete.')\r\n    } else {\r\n        console.log('DeleteMyAdThunk error.')\r\n    }\r\n}\r\n\r\nexport let AddAdThunk = (formData: AddAdFormDataType, userData: InitialStateAndUserDataType): ThunkActions => async (dispatch) => {\r\n\r\n    let category = +formData.category\r\n    let categoryText: Array<string> = ['продаж/бартер', 'оголошення', 'продаж', 'купівля/бартер']\r\n    let time: string = dataPicker()\r\n    let addData: AdDataType\r\n\r\n\r\n    if (userData.name != null && userData.idUser != null) {\r\n        let autor = userData.name\r\n        let autorId = userData.idUser\r\n\r\n        addData = {\r\n            idAd: generatorId(),\r\n            img: formData.adFoto = null,\r\n            description: formData.discription,\r\n            autor: autor,\r\n            autorId: autorId,\r\n            typeClass: formData.category,\r\n            typeText: categoryText[category],\r\n            adData: time\r\n        }\r\n        // response have many data, because here any type\r\n        let response: AxiosResponse<string> = await apiExpress.addNewAd(addData)\r\n        if (response.data === 'OK') {\r\n            dispatch(addAd())\r\n            console.log('New ad is added.')\r\n        } else {\r\n            console.log('AddAdThunk error.')\r\n        }\r\n\r\n    } else {\r\n        console.log('error in AddAdThunk: userData have null')\r\n    }\r\n}\r\n\r\nexport let AddEditAdThunk = (formData: EditAdFormDataType): ThunkActions => async (dispatch) => {\r\n\r\n    let typeClass: number = +formData.typeClass\r\n    let categoryText: Array<string> = ['продаж/бартер', 'оголошення', 'продаж', 'купівля/бартер']\r\n    let time: string = dataPicker()\r\n    let addData: AdDataType = {\r\n        ...formData,\r\n        typeClass: formData.typeClass,\r\n        typeText: categoryText[typeClass],\r\n        adData: time\r\n    }\r\n    let response: AxiosResponse<string> = await apiExpress.editAd(addData)\r\n\r\n    if (response.statusText === 'OK') {\r\n        dispatch(addEditAd())\r\n        dispatch(changeLoadEditAdFinish(true))\r\n    } else {\r\n        console.log(`error in AddEditAdThunk`)\r\n    }\r\n}\r\n/////////////\r\n\r\nexport default adReducer","import React, {FC, useEffect} from 'react'\r\nimport Header from '../header/header'\r\nimport AdItemContainer from './ad_item/ad_item_container'\r\nimport NoAds from \"../my_ad_page/no_ads\"\r\nimport AddAdButton from './add_ad_button/add_ad_button'\r\nimport Preloader from '../preloader/preloader'\r\nimport {connect, ConnectedProps} from 'react-redux'\r\nimport { getAdsThunk, deleteAllAd } from '../../redux/ad_reduser'\r\nimport {AppStateType} from '../../redux/redux_store'\r\nimport {AdsInfo, InitialStateAndUserDataType} from '../../types/types'\r\n\r\n///////////// types for props\r\ntype PropsType = PropsFromRedux\r\n// types takes from connect() where added mapStateToProps and mapDispatchToProps\r\ntype PropsFromRedux = ConnectedProps<typeof connector>\r\n// type for mapStateToProps\r\ntype MapStatePropsType = {\r\n    adsInfo: AdsInfo\r\n    login: InitialStateAndUserDataType\r\n}\r\n\r\n///////////// ad page component\r\nlet Ad: FC<PropsType> = ({adsInfo, login, getAdsThunk, deleteAllAd}) => {\r\n\r\n    // before load ads check auth-user and after close page remove ads from state\r\n    useEffect(() => {\r\n        getAdsThunk(login.idUser)\r\n        return () => {\r\n            deleteAllAd()\r\n          }\r\n      },[])\r\n\r\n    // if haveAds true - render preloader, if haveAds false - render noAds message\r\n    return <>\r\n        <Header />\r\n        {(adsInfo.adsData.length === 0 && adsInfo.haveAds)\r\n        ? <Preloader />\r\n        : !adsInfo.haveAds\r\n            ? <NoAds/>\r\n            : <AdItemContainer ads={adsInfo.adsData} userId={login.idUser} />}\r\n              <AddAdButton />\r\n    </>\r\n}\r\n\r\n///////////// create props for Ad component\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        adsInfo: state.adPage.adsInfo,\r\n        login: state.loginPage\r\n    }\r\n}\r\n\r\n// function for takes type from connect()\r\nconst connector = connect(mapStateToProps, { getAdsThunk, deleteAllAd })\r\nexport default connector(Ad)\r\n","import React, {FC, useState} from 'react'\r\nimport s from './add_ad_page.module.css'\r\nimport { Field, reduxForm, InjectedFormProps } from 'redux-form'\r\nimport {AddAdFormDataType} from '../../types/types'\r\n\r\n/////////////  add ad form component\r\n//InjectedFormProps injected type for redux-form, AddAdFormDataType type for submit function arguments\r\nlet AddAdForm: FC<InjectedFormProps<AddAdFormDataType>> = ({handleSubmit}) => {\r\n\r\n    // for activated \"load\" in button after click\r\n    const [submit, setSubmit] = useState(0)\r\n\r\n    return <form className={s.adForm} onSubmit={handleSubmit} >\r\n            <Field\r\n                placeholder={'Опис оголошення*'}\r\n                type={'text'}\r\n                name={'discription'}\r\n                component={'input'} />\r\n            <h2>Я хочу*</h2>\r\n            <div className={s.radioBlock}>\r\n                <div>\r\n                    <Field\r\n                        id='radio1'\r\n                        name={'category'}\r\n                        type='radio'\r\n                        value=\"0\"\r\n                        component={'input'} />\r\n                    <label htmlFor='radio1'>продати/обміняти</label>\r\n                    <Field\r\n                        id='radio2'\r\n                        name={'category'}\r\n                        type='radio'\r\n                        value=\"1\"\r\n                        component={'input'} />\r\n                    <label htmlFor='radio2'>оголошення</label>\r\n                </div>\r\n                <div>\r\n                    <Field\r\n                        id='radio3'\r\n                        name={'category'}\r\n                        type='radio'\r\n                        value=\"2\"\r\n                        component={'input'} />\r\n                    <label htmlFor='radio3'>продати</label>\r\n                    <Field\r\n                        id='radio4'\r\n                        name={'category'}\r\n                        type='radio'\r\n                        value=\"3\"\r\n                        component={'input'} />\r\n                    <label htmlFor='radio4'>купити/обміняти</label>\r\n                </div>\r\n            </div>\r\n            <div className={s.inputFile}>\r\n                <Field id='inputFile' name={'foto'} type='file' component={'input'} />\r\n                <label htmlFor='inputFile'>ДОДАТИ ФОТО</label>\r\n            </div>\r\n            {submit === 0\r\n                ? <button type='submit' onClick={()=>{setSubmit(1)}}>ДОДАТИ ОГОЛОШЕННЯ</button>\r\n                : <button>Завантаження...</button>}\r\n\r\n\r\n        </form>\r\n}\r\n\r\n// AddAdFormDataType for arguments in submit function\r\nexport default reduxForm<AddAdFormDataType>({ form: 'ad_add' })(AddAdForm)","import React, {FC} from 'react'\r\nimport s from './add_ad_page.module.css'\r\nimport Header from '../header/header'\r\nimport AddAdForm from './add_ad_form'\r\nimport {AddAdFormDataType} from '../../types/types'\r\n\r\n///////////// types for props\r\ntype PropsType = {\r\n    onSubmit: (formData: AddAdFormDataType) => void\r\n}\r\n\r\n///////////// add ad page component\r\nlet AddAdPage: FC<PropsType> = ({onSubmit}) => {\r\n\r\n    return <>\r\n        <Header />\r\n        <div className={s.addAdPage} >\r\n            <h1>ДОДАТИ ОГОЛОШЕННЯ</h1>\r\n            <AddAdForm onSubmit={onSubmit} />\r\n        </div>\r\n    </>\r\n}\r\n\r\nexport default AddAdPage","import React, {FC, useEffect} from 'react'\r\nimport { connect, ConnectedProps } from 'react-redux'\r\nimport AddAdPage from './add_ad_page'\r\nimport { AddAdThunk, stopToLoad} from '../../redux/ad_reduser'\r\nimport { Redirect } from 'react-router-dom'\r\nimport {AddAdFormDataType, InitialStateAndUserDataType} from '../../types/types'\r\nimport {AppStateType} from '../../redux/redux_store'\r\n\r\n///////////// types for props\r\ntype PropsType = PropsFromRedux\r\n// types takes from connect() where added mapStateToProps and mapDispatchToProps\r\ntype PropsFromRedux = ConnectedProps<typeof connector>\r\n// type for mapStateToProps\r\ntype MapStatePropsType = {\r\n    userData: InitialStateAndUserDataType\r\n    loaded: boolean\r\n}\r\n\r\n///////////// add ad page container component\r\nlet AddAdPageContainer: FC<PropsType> = ({ AddAdThunk, userData, loaded, stopToLoad}) => {\r\n\r\n    useEffect(() => {\r\n        // when page close this effect make \"loaded\" false for render adding ad page in future\r\n        return () => {\r\n            stopToLoad()\r\n        }\r\n    })\r\n\r\n    // call when form submit\r\n    let onSubmit = (formData: AddAdFormDataType) => {\r\n\r\n        AddAdThunk(formData, userData)\r\n    }\r\n\r\n    // \"loaded\" if true - ad added in server and redirect to my-ad page, if false render page for adding ad\r\n    if (loaded) {\r\n        return  <Redirect to='/my-ad' />\r\n    }\r\n    else {\r\n        return <AddAdPage onSubmit={onSubmit} />\r\n    }\r\n}\r\n\r\n///////////// create props for AddAdPageContainer component\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        userData: state.loginPage,\r\n        loaded: state.adPage.adAddLoad\r\n    }\r\n}\r\n\r\n// function for takes type from connect()\r\nconst connector = connect(mapStateToProps, { AddAdThunk, stopToLoad })\r\n\r\nexport default connector(AddAdPageContainer)","import React, {FC} from 'react'\r\nimport s from './my_ad_page.module.css'\r\nimport AdItemContainer from '../ad_page/ad_item/ad_item_container'\r\nimport {AdDataType} from '../../types/types'\r\n\r\n/////////// types for props\r\ntype PropsType = {\r\n    ads: Array<AdDataType>\r\n    userId: string\r\n\r\n    // :todo not sure maybe need added types for functions\r\n    editAd: (item: AdDataType) => void\r\n    deleteAd: (idItem: string) => void\r\n}\r\n\r\n\r\n///////////// my ad page component\r\nlet MyAdPage: FC<PropsType> = ({ads, userId, editAd, deleteAd}) => {\r\n\r\nreturn (\r\n<div className={s.pageContainer}>\r\n    <AdItemContainer ads={ads} deleteAd={deleteAd} userId={userId} editAd={editAd} />\r\n</div>\r\n)}\r\n\r\nexport default MyAdPage","import React, {FC, useEffect} from 'react'\r\nimport Header from '../header/header'\r\nimport MyAdPage from './my_ad_page'\r\nimport { connect } from 'react-redux'\r\nimport { editAd, deleteMyAdThunk, getMyAdsThunk, deleteMyAd } from '../../redux/ad_reduser'\r\nimport Preloader from '../preloader/preloader'\r\nimport AddAdButton from '../ad_page/add_ad_button/add_ad_button'\r\nimport NoAds from './no_ads'\r\nimport {AdsInfo} from '../../types/types'\r\nimport {AppStateType} from '../../redux/redux_store'\r\n\r\n/////////// types for props\r\ntype PropsType = {\r\n    myAdsInfo: AdsInfo\r\n    userId: string\r\n    editAd: any\r\n\r\n    deleteMyAdThunk: (idItem: string) => void\r\n    getMyAdsThunk: (userId: string) => void\r\n    deleteMyAd: () => void\r\n}\r\n\r\n///////////// my ad page container component\r\nlet MyAdPageContainer: FC<PropsType> = ({ myAdsInfo, userId, editAd, deleteMyAdThunk, getMyAdsThunk, deleteMyAd}) => {\r\n\r\n    // before render taked user id and get ads from server | after close page removed ads from state\r\n    useEffect(() => {\r\n        getMyAdsThunk(userId);\r\n        return () => {\r\n            deleteMyAd()\r\n        }\r\n    }, [])\r\n\r\n    // if haveAds true - render preloader, if haveAds false - render noAds message\r\n    return <>\r\n        <Header />\r\n        <AddAdButton />\r\n        {(myAdsInfo.adsData.length === 0 && myAdsInfo.haveAds)\r\n            ? <Preloader />\r\n            : !myAdsInfo.haveAds\r\n                ? <NoAds/>\r\n                : <MyAdPage ads={myAdsInfo.adsData} userId={userId} deleteAd={deleteMyAdThunk} editAd={editAd} />}\r\n    </>\r\n}\r\n\r\n///////////// create props for MyAdPageContainer component\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        myAdsInfo: state.adPage.myAdsInfo,\r\n        userId: state.loginPage.idUser\r\n    }\r\n}\r\n\r\n// @ts-ignore\r\nexport default connect(mapStateToProps, { editAd, deleteMyAdThunk, getMyAdsThunk, deleteMyAd })(MyAdPageContainer)","import React, {FC, useState} from 'react'\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form'\r\nimport peacePicture from '../../images/peace.jpg'\r\nimport s from '../add_ad_page/add_ad_page.module.css'\r\nimport {AdDataType, EditAdFormDataType} from '../../types/types'\r\n\r\n///////////// Types for props\r\ntype PropsType = {\r\n    initialValues: AdDataType | {}\r\n    isEditAdLoad: boolean\r\n}\r\n\r\n///////////// Edit ad form with redux-form component\r\nlet EditAdForm: FC<InjectedFormProps<EditAdFormDataType, PropsType> & PropsType>  = ({handleSubmit, isEditAdLoad}) => {\r\n    // effect for disable button after click\r\n    const [submit, setSubmit] = useState(0)\r\n\r\n    return <form className={s.adForm} onSubmit={handleSubmit} >\r\n            <Field\r\n                placeholder={'Опис оголошення*'}\r\n                type={'text'}\r\n                name={'description'}\r\n                component={'input'} />\r\n            <h2>Категорія*</h2>\r\n            <div className={s.radioBlock}>\r\n                <div>\r\n                    <Field\r\n                        id='radio1'\r\n                        name={'typeClass'}\r\n                        type='radio'\r\n                        value=\"0\"\r\n                        component={'input'} />\r\n                    <label htmlFor='radio1'>продати/обміняти</label>\r\n                    <Field\r\n                        id='radio2'\r\n                        name={'typeClass'}\r\n                        type='radio'\r\n                        value=\"1\"\r\n                        component={'input'} />\r\n                    <label htmlFor='radio2'>оголошення</label>\r\n                </div>\r\n                <div>\r\n                    <Field\r\n                        id='radio3'\r\n                        name={'typeClass'}\r\n                        type='radio'\r\n                        value=\"2\"\r\n                        component={'input'} />\r\n                    <label htmlFor='radio3'>продати</label>\r\n                    <Field\r\n                        id='radio4'\r\n                        name={'typeClass'}\r\n                        type='radio'\r\n                        value=\"3\"\r\n                        component={'input'} />\r\n                    <label htmlFor='radio4'>купити/обміняти</label>\r\n                </div>\r\n            </div>\r\n            <div className={s.inputFile}>\r\n                <img className={s.adFoto} src={peacePicture} />\r\n                <Field id='inputFile' name={'img'} type='file' component={'input'} />\r\n                <label htmlFor='inputFile'>ДОДАТИ ФОТО</label>\r\n            </div>\r\n        {submit === 0\r\n            ? <button type='submit' onClick={()=>{setSubmit(1)}}>ЗМІНИТИ</button>\r\n            : <button>Завантаження...</button>}\r\n\r\n        </form>\r\n}\r\n\r\nlet EditAdFormRedux = reduxForm<EditAdFormDataType, PropsType>({ form: 'edit_ad' })(EditAdForm)\r\n\r\nexport default EditAdFormRedux\r\n","import React, {FC} from 'react'\r\nimport s from '../add_ad_page/add_ad_page.module.css'\r\nimport {AdDataType, EditAdFormDataType} from '../../types/types'\r\nimport EditAdFormRedux from './edit_form_redux'\r\n\r\n///////////// types for props\r\ntype PropsType = {\r\n    onSubmit: (formData: EditAdFormDataType) => void\r\n    initialValues: AdDataType | {}\r\n    isEditAdLoad : boolean\r\n}\r\n\r\n///////// edit ad component\r\nlet EditMyAd: FC<PropsType> = ({onSubmit, initialValues, isEditAdLoad}) => {\r\n\r\n    return <div className={s.pageContainer}>\r\n            <h1>РЕДАГУВАТИ ОГОЛОШЕННЯ</h1>\r\n            <EditAdFormRedux onSubmit={onSubmit} initialValues={initialValues} isEditAdLoad={isEditAdLoad} />\r\n           </div>\r\n\r\n}\r\n\r\nexport default EditMyAd","import React, {FC, useEffect} from 'react'\r\nimport EditMyAd from './edit_my_ad'\r\nimport Header from '../header/header'\r\nimport {connect, ConnectedProps} from 'react-redux'\r\nimport {AddEditAdThunk, changeLoadEditAdFinish} from '../../redux/ad_reduser'\r\nimport { Redirect } from 'react-router-dom'\r\nimport {AdDataType, EditAdFormDataType} from '../../types/types'\r\nimport {AppStateType} from '../../redux/redux_store'\r\n\r\n///////////// types for props\r\ntype PropsType = PropsFromRedux\r\n// types takes from connect() where added mapStateToProps and mapDispatchToProps\r\ntype PropsFromRedux = ConnectedProps<typeof connector>\r\n// type for mapStateToProps\r\ntype MapStatePropsType = {\r\n    initialValues: AdDataType | {}\r\n    isEditAdLoad: boolean\r\n    isEditAdLoadFinish: boolean\r\n}\r\n\r\n///////////// add ad page container component\r\nlet EditMyAdContainer: FC<PropsType> = ({AddEditAdThunk, initialValues, isEditAdLoad, isEditAdLoadFinish, changeLoadEditAdFinish}) => {\r\n   // this Effect for clear LoadEditAd toggle after close page\r\n    useEffect(() => {\r\n        return () => {\r\n            changeLoadEditAdFinish(false)\r\n        }\r\n    }, [])\r\n    // function for take form data and call addEditAd()\r\n    let onSubmit = (formData: EditAdFormDataType) => {\r\n        AddEditAdThunk(formData)\r\n    }\r\n\r\n    if (!isEditAdLoadFinish) {\r\n        return <>\r\n            <Header />\r\n            <EditMyAd  onSubmit={onSubmit} initialValues={initialValues} isEditAdLoad={isEditAdLoad} />\r\n        </>\r\n    }\r\n    else {\r\n        return <Redirect to='/my-ad' />\r\n    }\r\n}\r\n\r\n///////////// create props for EditMyAdContainer component\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        initialValues: state.adPage.editAd,\r\n        isEditAdLoad: state.adPage.isEditAdLoad,\r\n        isEditAdLoadFinish: state.adPage.isEditAdLoadFinish\r\n    }\r\n}\r\n\r\n// function for takes type from connect()\r\nconst connector = connect(mapStateToProps, { AddEditAdThunk, changeLoadEditAdFinish })\r\n\r\nexport default connector(EditMyAdContainer)","import React, {FC} from 'react'\r\nimport { BrowserRouter, Route } from 'react-router-dom'\r\nimport './App.css'\r\nimport Login from './components/login_page/login_page_container'\r\nimport Ad from './components/ad_page/ad_page'\r\nimport { connect } from 'react-redux'\r\nimport { getCookie } from './services/cookies_functions'\r\nimport { setUser } from './redux/login_reduser'\r\nimport AddAdPageContainer from './components/add_ad_page/add_ad_page_container'\r\nimport MyAdPageContainer from './components/my_ad_page/my_ad_page_container'\r\nimport EditMyAdContainer from './components/edit_my_ad_page/edit_my_ad_container'\r\nimport { developerFun } from './services/developer_functions'\r\nimport {AppStateType} from './redux/redux_store'\r\nimport {InitialStateAndUserDataType} from './types/types'\r\n\r\n///////////// types for props\r\ntype PropsType = {\r\n  userData: InitialStateAndUserDataType\r\n  setUser: (userData: InitialStateAndUserDataType) => void\r\n}\r\n\r\n///////////// App component\r\nlet App: FC<PropsType> = ({ userData, setUser }) => {\r\n\r\n  /// developer delete cookies button CTRL and ALT get state\r\n  developerFun()\r\n  ////////////////////////////////////////\r\n\r\n\r\n  //////// cookies\r\n  if (getCookie('registered') === 'true' && !userData.registered) {\r\n    let userData = {\r\n      registered: true,\r\n      name: getCookie('user'),\r\n      idUser: getCookie('idUser')\r\n    }\r\n    setUser(userData)\r\n  }\r\n\r\n  return <BrowserRouter>\r\n      <div className='App'>\r\n        <div className='MobileWindow'>\r\n          <Route path='/' exact render={() => userData.registered ? <Ad /> : <Login />} />\r\n          <Route path='/add-ad' render={() => <AddAdPageContainer />} />\r\n          <Route path='/my-ad' render={() => <MyAdPageContainer />} />\r\n          <Route path='/edit_my_ad' render={() => <EditMyAdContainer />} />\r\n        </div>\r\n      </div>\r\n    </BrowserRouter>\r\n}\r\n\r\n///////////// create props for App component\r\nlet mapStateToProps = (state: AppStateType) => {\r\n  return {\r\n    userData: state.loginPage,\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, { setUser })(App)\r\n","import { deleteCookie } from './cookies_functions'\r\n\r\nexport let developerFun = (): void => {\r\n    document.addEventListener('keydown', function (event) {\r\n        if (event.ctrlKey) {\r\n          deleteCookie('registered')\r\n          deleteCookie('user')\r\n          deleteCookie('idUser')\r\n        }\r\n      })\r\n      document.addEventListener('keydown', function (event) {\r\n        if (event.altKey) {\r\n    // @ts-ignore\r\n            console.log(window.store.getState())\r\n        }\r\n      })\r\n}","// tslint:disable:no-console\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n        (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n        window.location.href\n  );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n              'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                    'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n\n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n\n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n            response.status === 404 ||\n            (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n            'No internet connection found. App is running in offline mode.'\n        );\n      });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore, combineReducers, applyMiddleware } from 'redux'\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport loginReduser from './login_reduser'\r\nimport adReduser from './ad_reduser'\r\nimport thunkMiddleware from \"redux-thunk\"\r\n\r\nlet redusers  = combineReducers(\r\n    {\r\n        loginPage: loginReduser,\r\n        adPage: adReduser,\r\n        form: formReducer\r\n    })\r\n\r\ntype RedusersType = typeof redusers\r\nexport type AppStateType = ReturnType<RedusersType>\r\n\r\n// create store and added middleware for thanks\r\nconst store = createStore(redusers, applyMiddleware(thunkMiddleware))\r\n\r\n// @ts-ignore // for view info in devtools\r\nwindow.store = store\r\n\r\n// @ts-ignore\r\nexport default store","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport store from './redux/redux_store'\nimport { Provider } from 'react-redux'\n\n\nReactDOM.render(<Provider store={store}>\n    <App />\n</Provider>, document.getElementById('root'))\n\nserviceWorker.unregister()\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginContainer\":\"login_page_loginContainer__2nXfN\",\"logoContainer\":\"login_page_logoContainer__3-X8T\",\"loginForm\":\"login_page_loginForm__3Bbeg\",\"inputForm\":\"login_page_inputForm__2pc_m\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logoContainer\":\"header_logoContainer__211IV\",\"buttonsBar\":\"header_buttonsBar__3cPoC\",\"headerContainer\":\"header_headerContainer__tefxY\",\"headerFixedBlock\":\"header_headerFixedBlock__3_8lO\"};","module.exports = __webpack_public_path__ + \"static/media/gebo_logo.4b26b25e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/peace.c600a348.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noAdsMessage\":\"my_ad_page_noAdsMessage__2MJ_9\"};"],"sourceRoot":""}